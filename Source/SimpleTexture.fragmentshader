#version 330

//in vec2 uv;

in vec4 mycolor;

uniform sampler2D roadSampler;	
uniform sampler2D grassSampler;	
uniform sampler2D towerSampler;	
uniform sampler2D crystalSampler;	
uniform sampler2D robotSampler;	


uniform sampler2D tempSampler;	


uniform sampler2D shadowMapSampler;
in mat4 Vout;	


struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;


flat in int isPlane;
flat in int isTower;
flat in int isCrystal;
flat in int isRobot;
flat in int isRed;
flat in int isGreen;
flat in int isSfaira ;

flat in int isSelectPlane;
flat in int isObject;


flat in int RoadTex;


in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec4 vertex_position_lightspace;
in vec2 vertex_UV;

out vec4 frag_colour;


vec4 Ks;
vec4 Kd;
vec4 Ka;
float Ns;


void main () {

	vec4 main_texture=vec4(0,1.,1.,.5);

	
	if(isPlane==1){

		if( RoadTex == 0 ){
			 main_texture = texture(grassSampler, vertex_UV);
		}
		else{
			main_texture = texture(roadSampler, vertex_UV);
		}
	}
	

	if(isTower==1){
	
		main_texture = texture(towerSampler, vertex_UV);
	
	}
	
	if(isCrystal==1){
	
		main_texture = texture(crystalSampler, vertex_UV);
	
	}
	
	if(isRobot==1){
	
		main_texture = texture(robotSampler, vertex_UV);
	
	}

    if(isRed==1){
	
		main_texture = vec4(1.,0,0,1.);
	
	}

    if(isGreen==1){
	
		main_texture = vec4(0,1,0,1.);
	
	}
    
    if(isSelectPlane==1){
        if(isObject==1){
            main_texture = vec4(1.,0, 0, 0.5);
        }
        else{
            main_texture = vec4(0,1.0, 0, 0.5);
        }
	
		
	
	}


    float shadow;
    vec4 La=light.La;
    vec4 Ls=light.Ls;
    vec4 Ld=light.Ld;

	vec3 projCoords =   vertex_position_lightspace.xyz/vertex_position_lightspace.w;
	//vec3 projCoords =   vertex_position_worldspace;

    // Since the depth map values are in range[0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    // Sampling the closest point in this position from the depth map
    // REMINDER: Since we are in lightspace coordinates,
    //           the z parameter is the depth from the camera
    float closestDepth = texture(shadowMapSampler,projCoords.xy).r;

    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

  

    //Dynamically Calculated bias
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((Vout * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);

    float bias = 0.005*tan(acos(cosTheta));
    bias = clamp(bias, 0,0.01);
    //bias = 0.05;
        
    //shadow = closestDepth > currentDepth ? 0.0f:1.0f;

    ///*
    shadow = 0.0;
    vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    vec2 texelSize = 1.0 / depthMap_dimensions;
    for(int x = -1; x <= 1; x++ ){
        for(int y = -1; y <= 1; y++ ){
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
        }
    }
    shadow /= 9.0;
    //*/
    if(projCoords.z > 1.0){
        shadow = 0.0;
     }

    shadow = 1.0-shadow;


    if(isSfaira==1){
            /*
            Ks=vec4(0.296648, 0.296648, 0.296648, 0.922 );
            Kd=vec4(1 ,0.829, 0.829, 0.922 );
            Ka=vec4(0.25 ,0.20725, 0.20725, 0.922 );
            Ns = 11.264;



            
            Ks=vec4(0.774597,0.774597,0.774597,1.0);
            Kd=vec4(00.4,0.4,0.4,1.0);
            Ka=vec4(0.25 ,0.25, 0.25,1.0);
            Ns = 76.8;
           
            
            Ka=vec4(0.1745 ,0.01175 ,0.01175,0.55 );
            Kd=vec4(0.61424 ,0.04136 ,0.04136,0.55);
            Ks=vec4(0.727811 ,0.626959 ,0.626959,0.55);
            Ns = 76.8;
            */

            Ks=vec4(0.297254, 0.30829 ,0.306678 ,0.8 );
            Kd=vec4(0.396, 0.74151,0.69102, 0.8);
            Ka=vec4(0.1 ,0.18725, 0.1745, 0.8 );
            Ns = 12.8;
            La=vec4(242 / 255.0f,0 / 255.0f,243 / 255.0f, 1.0f);
            Ld=vec4(242 / 255.0f,0 / 255.0f,243 / 255.0f, 1.0f);
            Ls=vec4(242 / 255.0f,0 / 255.0f,243 / 255.0f, 1.0f);

            

    }
    else if(isSfaira==2){
            /*
            Ka=vec4(0.02 ,0.02 ,0.02, 1.0);
            Kd=vec4(0.01 ,0.01 ,0.01, 1);
            Ks=vec4(0.4 ,0.4 ,0.4 ,1);
            Ns = 10;
            */
            Ka=vec4(0.05375 ,0.05 ,0.06625 ,0.82 );
            Kd=vec4(0.18275 ,0.17 ,0.22525, 0.82 );
            Ks=vec4(0.332741 ,0.328634, 0.346435, 0.82 );
            Ns = 38.4;
    }
    else{
	    Ks = vec4(0.5,0.5,0.5, 1.0);
        Kd = vec4(main_texture.rgb, 1.0);
        Ka = vec4(0.1, 0.1, 0.1, 1.0);
        Ns = 10;
    }


	vec4 Ia = La * Ka;

    vec4 Id = Ld * Kd * cosTheta; 

   
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, Ns);
    vec4 Is = Ls * Ks * specular_factor;

    //model the light distance effect
    float distance = length(light.lightPosition_worldspace - vertex_position_worldspace);
    float distance_sq = distance * distance/2.0f;

   
	frag_colour = vec4(Ia + shadow * Id * light.power / distance_sq + shadow*Is * light.power / distance_sq);
  

} 